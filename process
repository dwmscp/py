1. p = os.fork()
```bash
import os
pid = os.fork()
if pid == 0:
  print("child process")
else:
  print(f"parent process. child pid is: {pid}")
```
os.fork无法在Windows上运行
2. p = multiprocessing.Process(target=func, args=())
```bash
from multiprocessing import Process
def run(name):
  print(f"name is {name}")

if __name__ == "__main__":
  p = Process(target=run, args=('test', ))
  p.start()
  p.join()
```
3. 进程池Pool
```bash
from multiprocessing import Pool
import os, time, random
def long_time_task(name):
  start = time.time()
  time.sleep(random.random() * 3)
  end = time.time()
  print(f"task run {end - start}")

if __name__ == "__main__":  
  p = Pool(4)
  for i in range(5):
    p.apply_async(long_time_task, args=(i, ))
  print("waiting for all subprocess done...")    
  p.close()
  p.join()
  print("all subprocess done.")
```
4. subprocess
```bash
import subprocess
r = subprocess.call(["nslookup", "www.python.org"])

p = subprocess.Popen(["nslookup"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, err = p.communicate(b'set q=mx\npython.org\nexit\n')
```

5. python通过threading.Thread创建多线程，lock = threading.Lock()创建锁对象，lock.acquire()获取锁，同一时刻只能有一个线程获得锁，lock.release()释放锁。
   同一进程的所有线程共享进程数据，存在竞争。
   python无法利用多核CPU，由于存在GIL（gloabl interpreter lock），任何python线程执行前，必须先获得GIL，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。
   解释器：CPython


